plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'

}

configurations.all {
    exclude group: "commons-logging", module: "commons-logging"
}

group = 'com.upgrad'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
apply plugin: 'jacoco'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation "com.twilio.sdk:twilio:7.47.2"
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    compile group: 'com.opencsv', name: 'opencsv', version: '5.1'
    compile "com.razorpay:razorpay-java:1.3.8"
    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'

    implementation 'io.springfox:springfox-swagger2:2.9.2'
    compile 'io.springfox:springfox-swagger-ui:2.9.2'

    //for h2 or mysql
    runtimeOnly 'com.h2database:h2'

    //runtimeOnly 'mysql:mysql-connector-java'


    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

test {
    useJUnitPlatform()
}

//To run Jacoco reports after test by default
test.finalizedBy jacocoTestReport


task unitTest(type: Test) {
    useJUnitPlatform()
    filter {
        excludeTestsMatching "*Integration*"
        excludeTestsMatching "*Application*"
        excludeTestsMatching "*Feature*"
    }
    description = "Runs Unit Tests"

}


task integrationTest(type: Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching "*Integration*"
        includeTestsMatching "*Application*"
        includeTestsMatching "*Feature*"
    }
    description = "Runs Integration Tests"

}


jar {
    manifest {
        attributes "Main-Class": "ford.tools.swc.TeamMetricManagerApplication"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
task jarWithDependencies(type: Jar) {
    manifest {
        attributes 'Main-Class': "com.upgrad.eshop.EshopApplication"
    }
    baseName = 'upgrad-eshop-app'

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}